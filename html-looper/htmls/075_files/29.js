// Generated by CoffeeScript 1.6.2
/*
  what's up doc?
*/


(function() {
  'use strict';
  var animloop, centerContextOrigin, clear, decay, hsla, imageSmoothing, initCanvas, initConfig, initGui, initMath, initMouse, paintFromTo, resetContextOrigin, sizeCanvas, sizeCanvasesToWindow, square;

  initMath = function() {
    Math.hyp = function(a, b) {
      if (a == null) {
        a = 0;
      }
      if (b == null) {
        b = 0;
      }
      return Math.sqrt(a * a + b * b);
    };
    Math.radToDeg = function(rad) {
      return rad / (Math.PI / 180);
    };
    return Math.degToRad = function(deg) {
      return deg * (Math.PI / 180);
    };
  };

  initMouse = function() {
    window.Mouse = {
      x: -1,
      y: -1,
      xs: -1,
      ys: -1,
      xa: -1,
      xb: -1,
      ya: -1,
      yb: -1,
      up: true,
      down: false,
      clicks: 0,
      events: {
        up: function(e) {
          Mouse.up = true;
          Mouse.down = !Mouse.up;
          return Mouse.clicks++;
        },
        down: function(e) {
          Mouse.down = true;
          return Mouse.up = !Mouse.down;
        },
        move: function(e) {
          if ('touches' in e) {
            e.preventDefault();
            e = e.touches[0];
          }
          if (e.pageX === Mouse.x || e.pageY === Mouse.y) {
            return;
          }
          Mouse.x = Math.round(e.pageX - window.innerWidth / 2);
          Mouse.y = Math.round(e.pageY - window.innerHeight / 2);
          Mouse.xs = (Mouse.x + Mouse.xb) * 0.5;
          Mouse.ys = (Mouse.y + Mouse.yb) * 0.5;
          Mouse.xb = Mouse.x;
          return Mouse.yb = Mouse.y;
        }
      }
    };
    window.addEventListener('mousedown', Mouse.events.down, false);
    window.addEventListener('mouseup', Mouse.events.up, false);
    window.addEventListener('mousemove', Mouse.events.move, false);
    window.addEventListener('touchstart', Mouse.events.down, false);
    window.addEventListener('touchend', Mouse.events.up, false);
    return window.addEventListener('touchmove', Mouse.events.move, false);
  };

  initCanvas = function() {
    window.canvas = document.getElementById('canvas');
    window.ctx = canvas.getContext('2d');
    window.b_canvas = document.createElement('canvas');
    window.b_ctx = b_canvas.getContext('2d');
    sizeCanvasesToWindow();
    return window.addEventListener('resize', sizeCanvasesToWindow, false);
  };

  sizeCanvasesToWindow = function() {
    var canvasCopy, contextCopy, d, e, g, height, oh, ow, w, width;

    resetContextOrigin(ctx);
    resetContextOrigin(b_ctx);
    w = window;
    d = document;
    e = d.documentElement;
    g = d.getElementsByTagName('body')[0];
    width = w.innerWidth || e.clientWidth || g.clientWidth;
    height = w.innerHeight || e.clientHeight || g.clientHeight;
    ow = b_canvas.width;
    oh = b_canvas.height;
    canvasCopy = document.createElement('canvas');
    contextCopy = canvasCopy.getContext('2d');
    canvasCopy.width = ow;
    canvasCopy.height = oh;
    sizeCanvas(canvas, width, height);
    contextCopy.drawImage(b_canvas, 0, 0);
    b_canvas.side = Math.hyp(width, height);
    sizeCanvas(b_canvas, b_canvas.side, b_canvas.side);
    b_ctx.drawImage(canvasCopy, 0, 0, ow, oh);
    centerContextOrigin(ctx);
    return centerContextOrigin(b_ctx);
  };

  sizeCanvas = function(canvas, width, height) {
    canvas.w_FLOAT = width;
    canvas.h_FLOAT = height;
    canvas.width = width;
    canvas.height = height;
    canvas.top = -height / 2;
    canvas.right = width / 2;
    canvas.bottom = height / 2;
    return canvas.left = -width / 2;
  };

  centerContextOrigin = function(context) {
    context.restore();
    context.translate(context.canvas.w_FLOAT / 2, context.canvas.h_FLOAT / 2);
    return context.save();
  };

  resetContextOrigin = function(context) {
    context.restore();
    context.translate(context.canvas.left, context.canvas.top);
    return context.save();
  };

  hsla = function(h, s, l, a) {
    if (h == null) {
      h = 0;
    }
    if (s == null) {
      s = 100;
    }
    if (l == null) {
      l = 50;
    }
    if (a == null) {
      a = 1;
    }
    h = h % 360;
    s = Math.min(Math.max(s, 0), 100);
    l = Math.min(Math.max(l, 0), 100);
    a = Math.min(Math.max(a, 0), 1);
    return "hsla(" + h + ", " + s + "%, " + l + "%, " + a + ")";
  };

  clear = function(context) {
    var cc;

    cc = context.canvas;
    return context.clearRect(cc.left, cc.top, cc.width, cc.height);
  };

  imageSmoothing = function(context, a) {
    if (context == null) {
      context = ctx;
    }
    if (a == null) {
      a = false;
    }
    context.webkitImageSmoothingEnabled = a;
    context.mozImageSmoothingEnabled = a;
    return context.imageSmoothingEnabled = a;
  };

  square = function(context, size, color) {
    if (size == null) {
      size = 10;
    }
    if (color == null) {
      color = 'red';
    }
    context.save();
    context.translate(Mouse.xs, Mouse.ys);
    context.fillStyle = color;
    context.fillRect(-size / 2, -size / 2, size, size);
    context.strokeStyle = 'black';
    context.strokeRect(-size / 2, -size / 2, size, size);
    return context.restore();
  };

  decay = function(context, hor, ver, spread, r) {
    var dh, dw, dx, dy;

    if (hor == null) {
      hor = 0;
    }
    if (ver == null) {
      ver = 0;
    }
    if (spread == null) {
      spread = 0;
    }
    if (r == null) {
      r = 0;
    }
    dx = context.canvas.left - spread / 2;
    dy = context.canvas.top - spread / 2;
    dw = context.canvas.width + spread;
    dh = context.canvas.height + spread;
    context.save();
    context.translate(hor, ver);
    context.rotate(r);
    context.drawImage(context.canvas, dx, dy, dw, dh);
    return context.restore();
  };

  paintFromTo = function(source, dest) {
    var dh, dw, dx, dy, sh, sw, sx, sy;

    resetContextOrigin(dest);
    resetContextOrigin(source);
    sx = (source.canvas.width - dest.canvas.width) / 2;
    sy = (source.canvas.height - dest.canvas.height) / 2;
    sw = dest.canvas.width;
    sh = dest.canvas.height;
    dx = 0;
    dy = 0;
    dw = dest.canvas.width;
    dh = dest.canvas.height;
    dest.drawImage(source.canvas, sx, sy, sw, sh, dx, dy, dw, dh);
    centerContextOrigin(dest);
    return centerContextOrigin(source);
  };

  animloop = function() {
    var r1, r2;

    requestAnimationFrame(animloop);
    imageSmoothing(b_ctx, config.smoothing);
    imageSmoothing(ctx, config.smoothing);
    r1 = config.r_coarse + (Math.PI * config.r_PI);
    decay(b_ctx, 0, 0, config.spread1, r1);
    r2 = (config.r_fine / 1000) + (config.r_spin / 10000);
    decay(b_ctx, 0, 0, config.spread2, r2);
    square(b_ctx, 12, hsla(Date.now() / 40, 100, 50, 1));
    b_ctx.save();
    b_ctx.rotate(Math.PI);
    square(b_ctx, 12, hsla(Date.now() / 40 + 180, 100, 50, 1));
    ctx.restore();
    return paintFromTo(b_ctx, ctx);
  };

  initConfig = function() {
    var Configuration;

    Configuration = function() {
      return {
        clear: function() {
          clear(ctx);
          return clear(b_ctx);
        },
        smoothing: false,
        r_coarse: 0.0,
        r_fine: 0.0,
        r_spin: 0.0,
        r_PI: 0,
        spread1: 0.0,
        spread2: 0.0
      };
    };
    return window.config = new Configuration();
  };

  initGui = function() {
    var gui;

    gui = new dat.GUI();
    gui.add(config, 'smoothing');
    gui.add(config, 'r_PI', 0, 1).step(1);
    gui.add(config, 'r_coarse', -12, 12).step(1);
    gui.add(config, 'r_fine', -90, 90).step(1);
    gui.add(config, 'r_spin', -36, 36).step(1);
    gui.add(config, 'spread1', -36, 36).step(1);
    gui.add(config, 'spread2', -36, 36).step(1);
    return gui.add(config, 'clear');
  };

  window.onload = function() {
    initConfig();
    initMath();
    initMouse();
    initCanvas();
    initGui();
    return animloop();
  };

}).call(this);

/*
//@ sourceMappingURL=29.map
*/
