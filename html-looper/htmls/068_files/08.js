// Generated by CoffeeScript 1.6.2
/*
	rgba cycling by offset sin(time)
*/


(function() {
  var CLICKED_DURATION, Configuration, FRAME, Follower, NOW, PI, TIME, abs, animloop, between, cfgWave, clear, cos, decay, degToRad, hsla, hyp, imageSmoothing, initGui, initWave, radToDeg, rainbow, rainbowCircle, rgba, sin, tan, tick;

  TIME = 0;

  NOW = Date.now();

  FRAME = 0;

  CLICKED_DURATION = 0;

  tick = function() {
    FRAME++;
    TIME += (Date.now() - NOW) / 1000 * 60 | 0;
    NOW = Date.now();
    if (Mouse.down) {
      return CLICKED_DURATION++;
    }
  };

  PI = Math.PI;

  sin = function(a) {
    return Math.sin(a);
  };

  cos = function(a) {
    return Math.cos(a);
  };

  tan = function(a) {
    return Math.tan(a);
  };

  abs = function(a) {
    return Math.abs(a);
  };

  hyp = function(a, b) {
    return Math.sqrt(a * a + b * b);
  };

  radToDeg = function(rad) {
    return rad / (Math.PI / 180);
  };

  degToRad = function(deg) {
    return deg * (Math.PI / 180);
  };

  between = function(min, x, max) {
    return Math.min(Math.max(x, min), max);
  };

  rgba = function(r, g, b, a) {
    if (r == null) {
      r = 255;
    }
    if (g == null) {
      g = 0;
    }
    if (b == null) {
      b = 255;
    }
    if (a == null) {
      a = 1;
    }
    r = between(0, r | 0, 255);
    g = between(0, g | 0, 255);
    b = between(0, b | 0, 255);
    a = between(0, a, 1);
    return "rgba( " + r + ", " + g + ", " + b + ", " + a + ")";
  };

  hsla = function(h, s, l, a) {
    if (h == null) {
      h = 0;
    }
    if (s == null) {
      s = 100;
    }
    if (l == null) {
      l = 50;
    }
    if (a == null) {
      a = 1;
    }
    h = (h | 0) % 360;
    s = between(0, s, 100);
    l = between(0, l, 100);
    a = between(0, a, 1);
    return "hsla(" + h + ", " + s + "%, " + l + "%, " + a + ")";
  };

  clear = function(context) {
    return context.clearRect(context.canvas.left, context.canvas.top, context.canvas.width, context.canvas.height);
  };

  imageSmoothing = function(context, a) {
    if (context == null) {
      context = ctx;
    }
    if (a == null) {
      a = false;
    }
    context.webkitImageSmoothingEnabled = a;
    context.mozImageSmoothingEnabled = a;
    return context.imageSmoothingEnabled = a;
  };

  rainbow = function(a, offset) {
    var b, g, r;

    if (offset == null) {
      offset = 1;
    }
    r = sin(a + 0 * PI / 3 * offset) * 127 + 128;
    g = sin(a + 2 * PI / 3 * offset) * 127 + 128;
    b = sin(a + 4 * PI / 3 * offset) * 127 + 128;
    return rgba(r, g, b, 1);
  };

  rainbowCircle = function() {
    var i, j, speed, square_height, square_width, x, x_adj, y, y_adj, _i, _ref, _ref1, _results;

    square_height = hyp(canvas.height, canvas.width) / cfg.size;
    square_width = square_height;
    _results = [];
    for (i = _i = _ref = canvas.left + square_width * 2, _ref1 = canvas.right - square_width; square_width > 0 ? _i <= _ref1 : _i >= _ref1; i = _i += square_width) {
      _results.push((function() {
        var _j, _ref2, _ref3, _results1;

        _results1 = [];
        for (j = _j = _ref2 = canvas.top + square_height * 2, _ref3 = canvas.bottom - square_height; square_height > 0 ? _j <= _ref3 : _j >= _ref3; j = _j += square_height) {
          speed = TIME * 1 / 60 * cfg.speed;
          x_adj = cos(i * cfg.x_a / canvas.width - cfg.m_sens * Mouse.x / canvas.width + TIME * -cfg.h_speed);
          y_adj = cos(j * cfg.y_a / canvas.height + cfg.m_sens * Mouse.y / canvas.height + TIME * -cfg.v_speed);
          ctx.fillStyle = rainbow(speed - x_adj - y_adj, cfg.sat * -sin(x_adj + y_adj));
          x = i;
          y = j + sin(j * cfg.w_2 - i * cfg.w_1 + speed * cfg.w_s) * square_width / 2;
          ctx.beginPath();
          ctx.arc(x, y, square_width / 2 - 1, 0, 2 * PI, true);
          ctx.closePath();
          _results1.push(ctx.fill());
        }
        return _results1;
      })());
    }
    return _results;
  };

  decay = function(context, hor, ver, hspread, vspread, r) {
    var dh, dw, dx, dy;

    if (hor == null) {
      hor = 0;
    }
    if (ver == null) {
      ver = 0;
    }
    if (hspread == null) {
      hspread = 0;
    }
    if (vspread == null) {
      vspread = 0;
    }
    if (r == null) {
      r = 0;
    }
    dx = context.canvas.left - hspread / 2;
    dy = context.canvas.top - vspread / 2;
    dw = context.canvas.width + hspread;
    dh = context.canvas.height + vspread;
    context.save();
    context.translate(hor, ver);
    if (r !== 0) {
      context.rotate(r);
    }
    context.drawImage(context.canvas, dx, dy, dw, dh);
    return context.restore();
  };

  Follower = (function() {
    function Follower(index, x, y) {
      this.index = index;
      this.x = x;
      this.y = y;
    }

    Follower.prototype.follow = function() {
      var wave_one, wave_two, waves;

      wave_one = sin(this.x * cfg.len + FRAME / 10 * cfg.speed + cfg.offset) * cfg.amp;
      wave_two = sin(this.x * cfg.len2 + FRAME / 10 * cfg.speed2 + cfg.offset2) * cfg.amp2;
      waves = -wave_one - wave_two;
      return this.y = canvas.top + waves;
    };

    Follower.prototype.draw = function() {
      var hue;

      hue = rainbow(FRAME / 20 * cfg.hue_sp + this.x * cfg.hue_w + this.y * cfg.hue_h, 1 * cfg.sat);
      ctx.fillStyle = hue;
      return ctx.fillRect(this.x | 0, (this.y | 0) + 60, 1, 1);
    };

    return Follower;

  })();

  initWave = function() {
    var i, _i, _ref, _results;

    ctx.fillStyle = 'black';
    ctx.fillRect(canvas.left, canvas.top, canvas.width, canvas.height);
    window.crowd = [];
    _results = [];
    for (i = _i = 0, _ref = canvas.width; _i <= _ref; i = _i += 1) {
      _results.push(crowd[i] = new Follower(i, canvas.left + i, 60));
    }
    return _results;
  };

  window.addEventListener('resize', initWave, false);

  animloop = function() {
    var i, _i, _ref;

    imageSmoothing(ctx, cfg.smoothing);
    requestAnimationFrame(animloop);
    tick();
    for (i = _i = 0, _ref = crowd.length; _i < _ref; i = _i += 1) {
      crowd[i].follow();
      crowd[i].draw();
    }
    decay(ctx, 0, 1, 0, 0, 0);
    return cfgWave();
  };

  Configuration = function() {
    return {
      clear: function() {
        ctx.fillStyle = 'black';
        return ctx.fillRect(canvas.left, canvas.top, canvas.width, canvas.height);
      },
      smoothing: false,
      amp: 0,
      len: 0,
      offset: 0,
      speed: 0.5,
      amp2: 0,
      len2: 0,
      offset2: 0,
      speed2: -0.15,
      hue_w: 0,
      hue_h: 0,
      hue_sp: 0.1,
      sat: 0
    };
  };

  window.cfg = new Configuration();

  cfgWave = function() {
    cfg.amp = sin(FRAME / 2539) * 15;
    cfg.amp2 = sin(FRAME / 2069) * 11;
    cfg.len = sin(FRAME / 2053 + PI / 2) * 0.05 + 0.05;
    cfg.len2 = sin(FRAME / 2381) * 0.03 + 0.03;
    cfg.hue_w = sin(FRAME / 3187) * 0.03;
    cfg.hue_h = sin(FRAME / 2087) * 0.1 + 0.05;
    return cfg.sat = sin(FRAME / 2089) * 0.5 + 0.5;
  };

  initGui = function() {
    var gui;

    gui = new dat.GUI();
    gui.close();
    dat.GUI.toggleHide();
    gui.add(cfg, 'amp', -10, 20);
    gui.add(cfg, 'len', 0, 0.1);
    gui.add(cfg, 'speed', -1, 1);
    gui.add(cfg, 'amp2', -10, 20);
    gui.add(cfg, 'len2', 0, 0.1);
    gui.add(cfg, 'speed2', -1, 1);
    gui.add(cfg, 'hue_w', 0, 0.6);
    gui.add(cfg, 'hue_h', 0, 0.6);
    gui.add(cfg, 'sat', 0, 1);
    return gui.add(cfg, 'clear');
  };

  window.onload = function() {
    ctx.fillStyle = 'black';
    ctx.fillRect(canvas.left, canvas.top, canvas.width, canvas.height);
    initGui();
    initWave();
    return animloop();
  };

}).call(this);

/*
//@ sourceMappingURL=08.map
*/
