// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var Mouse, Square, animloop, canvas, ctx, decay, hsla, squares;

  (function() {
    var i, lastTime, vendors, _i, _ref;

    lastTime = 0;
    vendors = ['webkit', 'moz'];
    if (!window.requestAnimationFrame) {
      for (i = _i = 0, _ref = vendors.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        window.requestAnimationFrame = window["" + vendors[i] + "RequestAnimationFrame"];
        window.cancelAnimationFrame = window["" + vendors[i] + "CancelAnimationFrame"] || window["" + vendors[i] + "CancelRequestAnimationFrame"];
      }
    }
    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = function(callback, element) {
        var currTime, id, timeToCall;

        currTime = new Date().getTime();
        timeToCall = Math.max(0, 16 - (currTime - lastTime));
        id = window.setTimeout(function() {
          return callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };
    }
    if (!window.cancelAnimationFrame) {
      return window.cancelAnimationFrame = function(id) {
        return clearTimeout(id);
      };
    }
  })();

  canvas = document.getElementById('canvas');

  ctx = canvas.getContext('2d');

  canvas.getWindowSize = function() {
    var d, e, g, w;

    w = window;
    d = document;
    e = d.documentElement;
    g = d.getElementsByTagName('body')[0];
    this.width = w.innerWidth || e.clientWidth || g.clientWidth;
    this.height = w.innerHeight || e.clientHeight || g.clientHeight;
    this.min = Math.min(this.width, this.height);
    return this.max = Math.max(this.width, this.height);
  };

  canvas.sizeCanvas = function(w, h) {
    if (w == null) {
      w = canvas.width;
    }
    if (h == null) {
      h = canvas.height;
    }
    this.setAttribute('width', w);
    return this.setAttribute('height', h);
  };

  canvas.getWindowSize();

  canvas.sizeCanvas(canvas.width, canvas.height);

  canvas.windowGotResized = function() {
    var canvasCopy, contextCopy, oh, ow;

    ow = canvas.width;
    oh = canvas.height;
    canvasCopy = document.createElement('canvas');
    contextCopy = canvasCopy.getContext('2d');
    canvasCopy.setAttribute('width', ow);
    canvasCopy.setAttribute('height', oh);
    contextCopy.drawImage(canvas, 0, 0);
    canvas.getWindowSize();
    canvas.sizeCanvas(canvas.width, canvas.height);
    return ctx.drawImage(canvasCopy, 0, 0, ow, oh, 0, 0, canvas.width, canvas.height);
  };

  window.addEventListener('resize', canvas.windowGotResized, false);

  window.addEventListener('orientationchange', canvas.windowGotResized, false);

  ctx.imageSmoothing = function(a) {
    if (a == null) {
      a = false;
    }
    ctx.webkitImageSmoothingEnabled = a;
    ctx.mozImageSmoothingEnabled = a;
    return ctx.imageSmoothingEnabled = a;
  };

  ctx.imageSmoothing(false);

  Mouse = {
    x: canvas.height / 2,
    y: canvas.width / 2,
    up: true,
    down: false,
    clicks: 0,
    events: {}
  };

  Mouse.events.move = function(e) {
    if ('touches' in e) {
      e.preventDefault();
      e = e.touches[0];
    }
    if (e.pageX === Mouse.x && e.pageY === Mouse.y) {
      return;
    }
    Mouse.x = e.pageX;
    return Mouse.y = e.pageY;
  };

  Mouse.events.up = function() {
    Mouse.up = true;
    return Mouse.down = !Mouse.down;
  };

  Mouse.events.down = function() {
    Mouse.down = true;
    Mouse.up = !Mouse.down;
    return Mouse.clicks += 1;
  };

  document.addEventListener("mousemove", Mouse.events.move, false);

  document.addEventListener("touchmove", Mouse.events.move, false);

  document.addEventListener("mousedown", Mouse.events.down, false);

  document.addEventListener("touchstart", Mouse.events.down, false);

  document.addEventListener("touchend", Mouse.events.up, false);

  document.addEventListener("mouseup", Mouse.events.up, false);

  hsla = function(h, s, l, a) {
    if (h == null) {
      h = 0;
    }
    if (s == null) {
      s = 100;
    }
    if (l == null) {
      l = 50;
    }
    if (a == null) {
      a = 1;
    }
    return "hsla(" + h + ", " + s + "%, " + l + "%, " + a + ")";
  };

  Square = (function() {
    function Square(index, x, y) {
      this.index = index;
      this.x = x;
      this.y = y;
    }

    Square.prototype.draw = function() {
      var h, hue, i, rotation, w, x, y;

      i = this.index;
      hue = (i * 1) + (Date.now() / 36);
      rotation = -(Date.now() / 64 % 360) * (Math.PI / 180) + (i / 60);
      ctx.save();
      ctx.translate(Math.floor(this.x), Math.floor(this.y));
      ctx.rotate(rotation);
      h = Math.floor(canvas.max / 9);
      w = h;
      x = -w / 2;
      y = -h / 2 + Math.sin(Date.now() / 500 + i) * w / 10;
      ctx.strokeStyle = hsla(hue % 360, 100, 50, 0.1);
      ctx.strokeRect(x, y, w, h);
      return ctx.restore();
    };

    return Square;

  })();

  squares = [];

  squares.draw = function() {
    var i, _i, _ref, _results;

    _results = [];
    for (i = _i = 0, _ref = squares.length; _i < _ref; i = _i += 1) {
      _results.push(squares[i].draw());
    }
    return _results;
  };

  squares.counter = 0;

  squares.make = function(x, y, limit) {
    var i, _results;

    if (limit == null) {
      limit = 180;
    }
    this.counter++;
    i = this.counter;
    squares.push(new Square(i, x, y));
    _results = [];
    while (squares.length >= limit) {
      _results.push(squares.shift());
    }
    return _results;
  };

  (squares.makeGrid = function() {
    var g, i, j, _i, _ref, _results;

    g = Math.floor(canvas.max / 9);
    _results = [];
    for (i = _i = 0, _ref = canvas.height + g; g > 0 ? _i <= _ref : _i >= _ref; i = _i += g) {
      _results.push((function() {
        var _j, _ref1, _results1;

        _results1 = [];
        for (j = _j = 0, _ref1 = canvas.width + g; g > 0 ? _j <= _ref1 : _j >= _ref1; j = _j += g) {
          _results1.push(squares.make(j, i, (canvas.max * canvas.max) / g));
        }
        return _results1;
      })());
    }
    return _results;
  })();

  decay = function(h, v, s, r) {
    if (h == null) {
      h = 0;
    }
    if (v == null) {
      v = 0;
    }
    if (s == null) {
      s = 2;
    }
    if (r == null) {
      r = 0;
    }
    ctx.save();
    ctx.translate(canvas.width / 2 + h, canvas.height / 2 + v);
    ctx.rotate(r);
    ctx.drawImage(canvas, -s / 2 - canvas.width / 2, -s / 2 - canvas.height / 2, canvas.width + s, canvas.height + s);
    return ctx.restore();
  };

  decay.rotate = function(a) {
    var d, n;

    if (a == null) {
      a = 40;
    }
    n = Mouse.x / canvas.width - 0.5;
    d = canvas.height / (Mouse.y - canvas.height / 2) * a;
    return n / d;
  };

  decay.h = function(a) {
    if (a == null) {
      a = 2;
    }
    return ((Mouse.x / canvas.width) - 0.5) * a;
  };

  decay.v = function(a) {
    if (a == null) {
      a = 2;
    }
    return ((Mouse.y / canvas.height) - 0.5) * a;
  };

  decay.spread = 0;

  animloop = function() {
    window.requestAnimationFrame(animloop);
    ctx.imageSmoothing(true);
    if (Mouse.clicks % 2 === 0) {
      decay(decay.h(-3), decay.v(-3), decay.spread, decay.rotate(200));
    }
    return squares.draw();
  };

  animloop();

}).call(this);

/*
//@ sourceMappingURL=01.map
*/
