// Generated by CoffeeScript 1.6.3
(function() {
  var Mouse, PI, animloop, canvas, cos, ctx, frames, hypotenuse, pos, render, sin, sizeCanvasesToWindow, smoothMouse;

  pos = [];

  Mouse = {
    x: window.innerWidth / 2,
    y: window.innerHeight / 2,
    xA: [],
    yA: [],
    up: true,
    clicks: 0
  };

  Mouse.events = {};

  Mouse.events.move = function(e) {
    if ("touches" in e) {
      e = e.touches[0];
    }
    if (e.pageX === Mouse.x && e.pageY === Mouse.y) {
      return;
    }
    Mouse.x = (e.pageX + Mouse.x) * 0.5;
    return Mouse.y = (e.pageY + Mouse.y) * 0.5;
  };

  Mouse.avg = function(a, followSpeed, x, y) {
    if (!Array.isArray(pos[a])) {
      pos[a] = [Mouse.x, Mouse.y];
    }
    if (x > pos[a][0]) {
      pos[a][0] += (x - pos[a][0]) / followSpeed;
    } else if (x < pos[a][0]) {
      pos[a][0] -= (pos[a][0] - x) / followSpeed;
    } else {
      pos[a][0] += 0;
    }
    if (y > pos[a][1]) {
      pos[a][1] += (y - pos[a][1]) / followSpeed;
    } else if (y < pos[a][1]) {
      pos[a][1] -= (pos[a][1] - y) / followSpeed;
    } else {
      pos[a][1] += 0;
    }
    Mouse.xA[a] = Math.round(pos[a][0]);
    return Mouse.yA[a] = Math.round(pos[a][1]);
  };

  Mouse.events.up = function(e) {
    Mouse.down = false;
    return Mouse.up = true;
  };

  Mouse.events.down = function(e) {
    if ("touches" in e) {
      e.preventDefault();
      e = e.touches[0];
    }
    Mouse.down = true;
    Mouse.up = false;
    return Mouse.clicks += 1;
  };

  smoothMouse = function(headSpeed, tailSpeed) {
    var i, smoothMouse_id;
    Mouse.avg(0, 16, Mouse.x, Mouse.y);
    i = 1;
    while (i <= 64) {
      Mouse.avg(i, 3, Mouse.xA[i - 1], Mouse.yA[i - 1]);
      i++;
    }
    window.Mouse = Mouse;
    return smoothMouse_id = requestAnimationFrame(smoothMouse);
  };

  smoothMouse();

  document.addEventListener("mousemove", Mouse.events.move);

  document.addEventListener("touchmove", Mouse.events.move);

  document.addEventListener("mousedown", Mouse.events.down);

  document.addEventListener("touchstart", Mouse.events.down);

  document.addEventListener("touchend", Mouse.events.up);

  document.addEventListener("mouseup", Mouse.events.up);

  hypotenuse = function(a, b) {
    return Math.sqrt(a * a + b * b);
  };

  canvas = document.getElementById('canvas');

  ctx = canvas.getContext('2d');

  sizeCanvasesToWindow = function(event, zoom) {
    var canvasCopy, contextCopy, d, e, g, height, oh, ow, w, width;
    if (zoom == null) {
      zoom = 1;
    }
    w = window;
    d = document;
    e = d.documentElement;
    g = d.getElementsByTagName('body')[0];
    width = w.innerWidth || e.clientWidth || g.clientWidth;
    height = w.innerHeight || e.clientHeight || g.clientHeight;
    ow = canvas.width;
    oh = canvas.height;
    canvasCopy = document.createElement('canvas');
    contextCopy = canvasCopy.getContext('2d');
    canvasCopy.width = ow;
    canvasCopy.height = oh;
    contextCopy.drawImage(canvas, 0, 0);
    canvas.width = width / zoom;
    canvas.height = height / zoom;
    canvas.hypotenuse = hypotenuse(canvas.width, canvas.height);
    ctx.drawImage(canvasCopy, 0, 0, width / zoom, height / zoom);
    canvas.style.zoom = zoom;
    canvas.style.MozTransformOrigin = "0 0";
    return canvas.style.MozTransform = "scale(" + zoom + ", " + zoom + ")";
  };

  sizeCanvasesToWindow(null, 1);

  window.addEventListener('resize', sizeCanvasesToWindow, false);

  window.addEventListener('onorientationchange', sizeCanvasesToWindow, false);

  canvas.style.background = 'black';

  PI = Math.PI;

  sin = function(a) {
    return Math.sin(a);
  };

  cos = function(a) {
    return Math.cos(a);
  };

  frames = 0;

  render = function() {
    var i, rotation, size, _i;
    for (i = _i = 1; _i <= 64; i = _i += 1) {
      ctx.fillStyle = "hsla(" + ((frames / 3 + i / 64 * 360) % 360) + ",100%,50%,0.2)";
      size = canvas.hypotenuse;
      rotation = i / 64 * -2 * PI - sin(frames / 1024 + i / 64 * PI / 2) * PI / 2;
      ctx.save();
      ctx.translate(Mouse.xA[i], Mouse.yA[i]);
      ctx.rotate(rotation - PI);
      ctx.fillRect(size * 0, 0, size, 1);
      ctx.rotate(-rotation * 2);
      ctx.fillRect(-size, 0, size, 1);
      ctx.restore();
    }
    return null;
  };

  (animloop = function() {
    var animloop_id;
    animloop_id = requestAnimationFrame(animloop);
    frames++;
    ctx.fillStyle = 'hsla(0,0%,0%,0.02)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    return render();
  })();

}).call(this);

/*
//@ sourceMappingURL=02.map
*/
