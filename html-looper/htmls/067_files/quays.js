// Generated by CoffeeScript 1.7.0

/*
canvas animation by chris shier http://csh.bz chris.shier@gmail.com
 */

(function() {
  var Mouse, PI, animloop, canvas, cos, ctx, decay, donut, hsla, now, rainbow, rgba, sin, start;

  PI = Math.PI;

  sin = function(a) {
    return Math.sin(a);
  };

  cos = function(a) {
    return Math.cos(a);
  };

  start = Date.now();

  now = 0;

  hsla = function(h, s, l, a) {
    return "hsla(" + h + "," + s + "%," + l + "%," + a + ")";
  };

  rgba = function(r, g, b, a) {
    return "rgba(" + (r | 0) + "," + (g | 0) + "," + (b | 0) + "," + a + ")";
  };

  rainbow = function(angle, alpha, offset) {
    var b, g, r;
    if (angle == null) {
      angle = 0;
    }
    if (alpha == null) {
      alpha = 1;
    }
    if (offset == null) {
      offset = 1;
    }
    r = 127 + 127 * sin(angle);
    g = 127 + 127 * sin(angle + 2 * PI / 3 * offset);
    b = 127 + 127 * sin(angle + 4 * PI / 3 * offset);
    return rgba(r, g, b, alpha);
  };

  canvas = document.getElementById('canvas');

  (canvas.resizeHander = function() {
    canvas.width = window.innerWidth;
    return canvas.height = window.innerHeight;
  })();

  window.addEventListener('resize', canvas.resizeHander, false);

  ctx = canvas.getContext("2d");

  Mouse = {
    x: canvas.width / 2,
    y: canvas.height / 2,
    down: false,
    held: 0,
    toggle: false,
    path: [],
    store: function() {
      Mouse.path.push({
        x: Mouse.x,
        y: Mouse.y
      });
      if (Mouse.path.length > 10) {
        return Mouse.path.shift();
      }
    },
    smooth: function(smoothRate) {
      var i, path, xDif, xNew, yDif, yNew, _i, _ref, _results;
      if (smoothRate == null) {
        smoothRate = 0.9;
      }
      path = Mouse.path;
      _results = [];
      for (i = _i = 1, _ref = path.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        xNew = (path[i].x + path[i - 1].x) * 0.5;
        yNew = (path[i].y + path[i - 1].y) * 0.5;
        xDif = path[i].x - xNew;
        yDif = path[i].y - yNew;
        path[i].x -= xDif * smoothRate;
        _results.push(path[i].y -= yDif * smoothRate);
      }
      return _results;
    },
    events: {
      move: function(e) {
        Mouse.x = (e.pageX + Mouse.x) * 0.5 | 0;
        return Mouse.y = (e.pageY + Mouse.y) * 0.5 | 0;
      },
      down: function(e) {
        Mouse.down = !Mouse.down;
        return console.log(rainbow(1, 1, 1));
      },
      up: function(e) {
        Mouse.down = !Mouse.down;
        return Mouse.toggle = !Mouse.toggle;
      }
    },
    addEventListeners: function(target) {
      target.addEventListener('mousemove', Mouse.events.move, false);
      target.addEventListener('mousedown', Mouse.events.down, false);
      return target.addEventListener('mouseup', Mouse.events.up, false);
    }
  };

  Mouse.addEventListeners(canvas);

  decay = function(hor, ver, spread, r) {
    var dh, dw, dx, dy;
    if (hor == null) {
      hor = 0;
    }
    if (ver == null) {
      ver = 0;
    }
    if (spread == null) {
      spread = 0;
    }
    if (r == null) {
      r = 0;
    }
    dx = -spread / 2;
    dy = -spread / 2;
    dw = canvas.width + spread;
    dh = canvas.height + spread;
    ctx.save();
    ctx.translate(hor, ver);
    ctx.rotate(r);
    ctx.drawImage(canvas, dx, dy, dw, dh);
    return ctx.restore();
  };

  donut = function(xc, yc, ro, ri, angle) {
    var i, res, x, y, _i, _j, _ref, _ref1;
    res = PI / 30;
    ctx.beginPath();
    for (i = _i = 0, _ref = PI * 2; res > 0 ? _i <= _ref : _i >= _ref; i = _i += res) {
      x = ro * cos(i + PI);
      y = angle * ro * sin(i);
      ctx.lineTo(x + xc, y + yc);
    }
    for (i = _j = 0, _ref1 = PI * 2; res > 0 ? _j < _ref1 : _j > _ref1; i = _j += res) {
      x = ri * cos(i);
      y = angle * ri * sin(i);
      ctx.lineTo(x + xc, y + yc);
    }
    return ctx.closePath();
  };

  (animloop = function() {
    var i, iPI, ri, ro, _i, _ref;
    animloop.id = requestAnimationFrame(animloop);
    now = (Date.now() - start) / 1000;
    Mouse.store();
    if (Mouse.down) {
      Mouse.held++;
    }
    for (i = _i = 0, _ref = Mouse.path.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      iPI = i / Mouse.path.length * PI;
      ri = Math.min(canvas.width, canvas.height) / 4 * (beat / 8 + 1);
      ro = ri / 3;
      donut(Mouse.path[i].x, Mouse.path[i].y + i * ro / 30, ro - i, ri, 0.8);
      ctx.fillStyle = hsla(now * 360 / 30 + i * 10 + beat * 30, 95, 50 + 10 * sin(iPI / 1.4 + PI / 1.9), 0.15);
      ctx.fill();
    }
    decay(-3 * (Mouse.x / canvas.width - 0.5), -3 * (Mouse.y / canvas.height - 0.5), 3, PI / 1800 * sin(now));
    return decay(0, 0, -0.5, PI / 1850 * sin(now + PI));
  })();

}).call(this);

//# sourceMappingURL=quays.map
